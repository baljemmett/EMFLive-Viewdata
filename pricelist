#!/usr/bin/env perl

use strict;
use warnings;
use utf8;

use JSON::PP;
use Data::Dumper;
use Getopt::Long;
use PriceListFormatter;

my $directory = "newframes";
my $year = 2024;

my %captions = (
    shop => "ESSENTIALS",
    cybar => "COLD AS ICE",
    bar => "ALSO SERVING",
);

my %straplines = (
    shop => "Available from the shop",
    cybar => "On sale in the cybar",
    bar => "Other bar refreshment",
);

my %hidden_bar_departments = (
    "Real Ale" => 1,
    "Lager" => 1,
    "Craft Keg" => 1,
    "Real Cider" => 1,
);

my $shop = 0;
my $cybar = 0;
my $bar = 0;
my $where;

GetOptions("year=s" => \$year,
           "directory=s" => \$directory,
           "shop" => \$shop,
           "cybar" => \$cybar,
           "bar" => \$bar) or die "Error in command line arguments.";

my $frame_number;
my $filename;

if (($shop + $cybar + $bar) != 1)
{
    die "Specify one of --shop, --bar or --cybar";
}

if ($shop)
{
    $frame_number = 34;
    $filename = "shop.json";
    $where = "shop";
}
elsif ($cybar)
{
    $frame_number = 33;
    $filename = "cybar.json";
    $where = "cybar";
}
elsif ($bar)
{
    $frame_number = 32;
    $filename = "stocktypes.json";
    $where = "bar";
}

my $full_list;

if (open my $input, "<", $filename)
{
    local $/ = undef;
    $full_list = JSON::PP->new->utf8->decode(<$input>);
    close $input;
}
else
{
    die "Cannot open input $filename: $!";
}

# Ensure output directory exists
-d $directory || mkdir $directory || die "Could not create $directory/: $!";

$TelstarFrame::directory = $directory;
$TelstarFrame::service = "[R][n][C] EMF ${year}[W]Live   [-]";

my %sections = ();
my %departments = ();

# Scan full list and organise by department
for my $key (keys %{$full_list})
{
    for my $item (@{$full_list->{$key}})
    {
        my $department = $item->{department}->{id};
        push @{$sections{$department}}, $item;

        unless(exists $departments{$department})
        {
            $departments{$department} = $item->{department}->{description};
        }
    }
}

my $caption = $captions{$where};
my $strap   = $straplines{$where};
my $header  = "[R][n][D][Y]$caption:[W]$strap";

my $lister = new PriceListFormatter($shop ? "shop" : "bar",
                                    $frame_number,
                                    3,
                                    $header);

for my $section (sort keys %sections)
{
    next if exists $hidden_bar_departments{$departments{$section}};

    my $department = $departments{$section};
    $department =~ s/\N{U+2264}/<=/g;
    $department =~ s/(\d\d% VAT)/$1 included/;
    
    $lister->new_section($department);
    $lister->list_items(@{$sections{$section}});
}

$lister->finish();