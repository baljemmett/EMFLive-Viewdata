#!/usr/bin/env perl

use strict;
use warnings;

use List::Util qw(min max);
use Text::Wrap;
use Data::Dumper;
use ScheduleReader;
use TelstarFrame;
use Paginator;

###
# Various settings and suchlike
###

# Which year are we in, and where's the schedule file?
my $year     = 2022;
my $filename = "$year.json";

$TelstarFrame::service = "[R][n][C] EMF ${year}[W]Live   [-]";
$TelstarFrame::directory = "newframes";

# Wrap widths are one less than expected because if the text runs into the
# final column, adding a linebreak causes a blank line.  Until TelstarFrame
# can correctly calculate line widths accounting for markup, we work around
# this by just avoiding the last column!
my $index_wrapper = Text::Wrapper->new(columns => 36);
my $event_wrapper = Text::Wrapper->new(columns => 38);

###
# Subroutines
###

sub add_wrapped_event_field($$$)
{
	my ($frame, $field, $value) = @_;

	my $field_wrapper = Text::Wrapper->new(columns => 38,
	                                       par_start => "",
	                                       body_start => " "x(2 + length $field));
	my @wrapped_lines = split /\n/, $field_wrapper->wrap($field . ": " . $value);
	my $wrapped_first = shift @wrapped_lines;
	$wrapped_first =~ s/: /:[C]/;

	$frame->add_line("[W]$wrapped_first");
	map { $frame->add_line("[C]$_"); } @wrapped_lines;
}

# Generate the detail frames for an event
sub generate_event_detail_frames($$$@)
{
	my ($event, $entry_frame_number, $on_new_page, @header) = @_;

	my $schedule_line = "[C]$event->{start} - $event->{end}   $event->{venue}";
	my $frame = new TelstarFrame($entry_frame_number);
	my $paginator = new Paginator($frame,
	{
		header => [ @header, $schedule_line ],
		prefix => " ",
		on_new_page => $on_new_page
	});

	$on_new_page->($frame);

	my @wrapped_title = split /\n/, $event_wrapper->wrap($event->{title});
	my @wrapped_by    = split /\n/, $event_wrapper->wrap("$event->{type} by " . $event->{by});

	my $wrapped_first = shift @wrapped_by;
	$wrapped_first =~ s/ by / by[C]/;

	# Add the title over as many lines as needed
	map { $frame->add_line("[Y]$_"); } @wrapped_title;

	# And the event type and first line of speaker list
	$frame->add_line("[W]$wrapped_first");

	# Rest of the speaker list, if any
	map { $frame->add_line("[C]$_"); } @wrapped_by;
	$frame->add_line("");

	# Cost, age range, max. attendees (as appropriate)
	add_wrapped_event_field($frame, "Cost", $event->{cost}) if $event->{cost};
	add_wrapped_event_field($frame, "Ages", $event->{ages}) if $event->{ages};
	add_wrapped_event_field($frame, "Capacity", $event->{capacity}) if $event->{capacity};

	# A blank line to set off the header block, if needed
	$frame->add_line("") if $event->{cost} || $event->{ages} || $event->{capacity};

	# Content note (if any) before description
	if (defined $event->{cws} && $event->{cws} ne "")
	{
		my @wrapped_cws = split /\n/, $event_wrapper->wrap("Content notes: " . $event->{cws});
		my $wrapped_first = shift @wrapped_cws;
		$wrapped_first =~ s/: /:[W]/;

		$frame->add_line("[Y]$wrapped_first");
		map { $frame->add_line("[W]$_"); } @wrapped_cws;
		$frame->add_line("");
	}

	if ($frame->count_lines() > 22)
	{
		print "Event $event->{id} has header block exceeding a single frame.\n";
	}

	# And finally we can add the complete event description
	# which could easily span several pages.
	$paginator->paginate_text($event->{desc});
}

# Generate a complete schedule with event index and detail pages
sub generate_schedule_tree($$@)
{
	my ($root, $heading, @events) = @_;

	print "Generating $heading with " . scalar @events . " events...\n";

	my @header = (
		"[R][n][D][Y]WHAT'S ON:[W]$heading",
		"",
		"",
	);

	my $first_index_frame =  $root       * 1000;
	my $first_entry_frame = ($root + 10) * 1000;

	my $index = new TelstarFrame($first_index_frame);
	my $index_paginator = new Paginator($index,
	{
		header => \@header,
		continues => "",
		continued => "",
		on_new_page => sub {
			my $frame = shift;
			$frame->set_route(0, 1);	# Route 0 back to schedule index
			1;
		}
	});
	my $index_key = 0;

	$index->set_route(0, 1);			# Route 0 back to schedule index
	$index->{"pid"}{"sequential"} = 1;

	for my $event_idx (0..$#events)
	{
		my $event = $events[$event_idx];
		my $entry_frame = $first_entry_frame + $event->{id};

		# Build the index entry for this event
		my $schedule_line = "[C]$event->{start} - $event->{end}   $event->{venue}";
		my @wrapped_title = split /\n/, $index_wrapper->wrap($event->{title});
		my @wrapped_by    = split /\n/, $index_wrapper->wrap("$event->{type} by " . $event->{by});

		my $wrapped_first = shift @wrapped_by;
		$wrapped_first =~ s/ by / by[C]/;
		
		my @index_entry = ();
		push @index_entry, map "  [Y]$_", @wrapped_title;
		push @index_entry, "  [W]$wrapped_first";
		push @index_entry, map "  [C]$_", @wrapped_by;
		push @index_entry, "";

		# Set menu number and add index entry to index page
		if (! $index_paginator->has_room_for(@index_entry))
		{
			$index_paginator->new_page();
			$index_key = 0;
		}

		unshift @index_entry, "[B]" . ++$index_key . $schedule_line;
		$index_paginator->add_text_block(@index_entry);
		$index_paginator->frame()->set_route($index_key, $entry_frame);

		# Work out prev/next routes for event detail frames...
		my $prev_event = $event_idx > 0 ? $events[$event_idx - 1] : undef;
		my $next_event = $event_idx < $#events ? $events[$event_idx + 1] : undef;
		my $prev_entry_frame = defined $prev_event ? $first_entry_frame + $prev_event->{id} : undef;
		my $next_entry_frame = defined $next_event ? $first_entry_frame + $next_event->{id} : undef;

		my $set_routes = sub
		{
			my $frame = shift;

			# Route 0 back to index frame on correct page
			$frame->set_route(0, $index_paginator->frame()->{"pid"}{"page-no"});

			# Route 7 and 9 to prev/next events, if possible
			$frame->set_route(7, $prev_entry_frame) if defined $prev_entry_frame;
			$frame->set_route(9, $next_entry_frame) if defined $next_entry_frame;

			1;
		};
		
		# ... and finally create the detail frames
		generate_event_detail_frames($event, $entry_frame, $set_routes, @header);
	}

	$index_paginator->finish();
}

# Generate a tree of event detail pages for use by a now/next page
sub generate_nownext_pages($$$@)
{
	my ($events, $root, $heading, @venues) = @_;

	my @header = (
		"[R][n][D][Y]NOW & NEXT:[W]$heading",
		"",
		"",
	);

	# Determine now/next frame number for each venue, based on root page number
	# and supplied order of venues for this now/next group
	my %venue_pages = ();
	for my $venue_idx (0..$#venues)
	{
		$venue_pages{$venues[$venue_idx]} = ($root * 100) + $venue_idx;
	}

	# Filter events to only those in a venue included in this group
	my @events = grep exists $venue_pages{$_->{venue}}, @$events;
	print "Generating now/next details for $heading with " , scalar @events,
	      " events...\n";

	# Now create detail pages for each event by ID
	my $first_entry_frame = $root * 1000;
	for my $event (@events)
	{
		my $entry_frame = $first_entry_frame + $event->{id};
		my $set_routes = sub
		{
			my $frame = shift;

			# Route 0 back to associated now/next frame
			$frame->set_route(0, $venue_pages{$event->{venue}});

			1;
		};

		# Now create the event detail frames
		generate_event_detail_frames($event, $entry_frame, $set_routes, @header);
	}
}

# Gather and display statistics about long items, weird times etc.
sub show_statistics(@)
{
	my $longest_title_chars = 0;
	my $longest_title_lines = 0;
	my $longest_desc_chars  = 0;
	my $longest_desc_lines  = 0;
	my $longest_by_chars    = 0;
	my $longest_by_lines    = 0;
	my $longest_venue       = 0;
	my $longest_index_lines = 0;
	my $spanning_days       = 0;
	my $spanning_24_hours   = 0;

	my $wrapper = Text::Wrapper->new(columns => 36);

	for my $event (@_)
	{
		my ($sday, $shour, $smin) = ($event->{sdate} =~ /\-(\d\d) (\d\d):(\d\d)/);
		my ($eday, $ehour, $emin) = ($event->{edate} =~ /\-(\d\d) (\d\d):(\d\d)/);

		if ($sday != $eday)
		{
			$spanning_days++;

			if ($ehour > $shour || ($ehour == $shour && $emin >= $smin))
			{
				print "Event $event->{id} runs for more than 24 hours?  ($event->{sdate} to $event->{edate})\n";
				$spanning_24_hours++;
			}
			else 
			{
				print "Event $event->{id} crosses midnight: $event->{sdate} to $event->{edate}.\n";
			}
		}

		my $by = $event->{type} . " by " . $event->{by};

		$longest_title_chars = max($longest_title_chars, length($event->{title}));
		$longest_desc_chars = max($longest_desc_chars, length($event->{desc}));
		$longest_by_chars = max($longest_by_chars, length($by));
		$longest_venue = max($longest_venue, length($event->{venue}));

		my $title_lines = scalar split /\n/, $wrapper->wrap($event->{title});
		my $desc_lines = scalar split /\n/, $wrapper->wrap($event->{desc});
		my $by_lines = scalar split /\n/, $wrapper->wrap($by);

		$longest_title_lines = max($longest_title_lines, $title_lines);
		$longest_desc_lines = max($longest_desc_lines, $desc_lines);
		$longest_by_lines = max($longest_by_lines, $by_lines);

		$longest_index_lines = max($longest_index_lines, $title_lines + $by_lines);
	}

	print "\n" if $spanning_days > 0;
	print "Schedule statistics:\n";
	print "====================\n";
	print "Total schedule size ....: ", scalar @_, " events.\n";
	print "Longest title ..........: $longest_title_lines lines, $longest_title_chars characters.\n";
	print "Longest description ....: $longest_desc_lines lines, $longest_desc_chars characters.\n";
	print "Longest speaker list ...: $longest_by_lines lines, $longest_by_chars characters.\n";
	print "Longest index entry ....: $longest_index_lines lines.\n";
	print "Longest venue name .....: $longest_venue characters.\n";
	print "\n";
}

###
# Main body of script
###

# Start by reading the schedule JSON...
my @events = ScheduleReader::from_file($filename);

# Give the event list the once-over, display general stats that might be useful
# to eyeball to make sure our formatting isn't going to be horrendously broken.
show_statistics(@events);

# Now go ahead and create page hierarchies for each of the schedules we want.
generate_schedule_tree(100, "Full Schedule", @events);
generate_schedule_tree(101, "Friday Schedule", grep($_->{day} eq "Fri", @events));
generate_schedule_tree(102, "Saturday Schedule", grep($_->{day} eq "Sat", @events));
generate_schedule_tree(103, "Sunday Schedule", grep($_->{day} eq "Sun", @events));
generate_schedule_tree(104, "Stage A Schedule", grep($_->{venue} eq "Stage A", @events));
generate_schedule_tree(105, "Stage B Schedule", grep($_->{venue} eq "Stage B", @events));
generate_schedule_tree(106, "Stage C Schedule", grep($_->{venue} eq "Stage C", @events));
generate_schedule_tree(107, "Workshop Schedules", grep($_->{venue} =~ "Workshop", @events));
generate_schedule_tree(108, "Null Sector Schedule", grep($_->{venue} =~ "Null Sector", @events));
generate_schedule_tree(109, "Other Venue Schedules", grep($_->{venue} !~ "Stage|Workshop|Null Sector", @events));

# Get the canonical venue ordering so that we can work out the correct parent
# page when generating now/next detail pages.
my @all_venues = ScheduleReader::all_venues(@events);

generate_nownext_pages(\@events, 21, "Stage A", grep($_ eq "Stage A", @all_venues));
generate_nownext_pages(\@events, 22, "Stage B", grep($_ eq "Stage B", @all_venues));
generate_nownext_pages(\@events, 23, "Stage C", grep($_ eq "Stage C", @all_venues));
generate_nownext_pages(\@events, 24, "Workshops", grep($_ =~ "Workshop", @all_venues));
generate_nownext_pages(\@events, 25, "Null Sector", grep($_ =~ "Sector", @all_venues));
generate_nownext_pages(\@events, 26, "Other Venues", grep($_ !~ "Stage|Workshop|Sector", @all_venues));
generate_nownext_pages(\@events, 27, "All Stages", grep($_ =~ "Stage", @all_venues));
generate_nownext_pages(\@events, 29, "All Venues", @all_venues);