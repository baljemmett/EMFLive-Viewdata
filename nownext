#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use Time::Local qw(timelocal_posix);
use POSIX qw(strftime);

use ScheduleReader;
use TelstarFrame;
use Paginator;
use Text::Wrapper;

###
# Various settings and suchlike
###

# Which year are we in, and where's the schedule file?
my $year      = 2024;
my $filename  = "$year.json";
my $directory = "newframes";

###
#   Main body of script
###
my $force_time = undef;

GetOptions("filename=s" => \$filename,
           "time=s" => \$force_time,
           "year=s" => \$year,
           "directory=s" => \$directory)
or die "Error in command line arguments.";

$TelstarFrame::service = "[R][n][C] EMF ${year}[W]Live   [-]";
$TelstarFrame::directory = $directory;

# Find current time, but allow it to be partially overridden by command line.
my $now = time();
if (defined $force_time)
{
    my @fake_now = localtime();
    my @parts = split /[-: ]+/, $force_time;

    # @fake_now contains, in order:
    # sec min hour day mon year weekday yearday isdst
    # @parts contains some prefix of:
    # year mon day hour min sec

    $fake_now[5] = shift(@parts) - 1900 if @parts;
    $fake_now[4] = shift(@parts) - 1 if @parts;
    $fake_now[3] = shift @parts if @parts;
    $fake_now[2] = shift @parts if @parts;
    $fake_now[1] = shift @parts if @parts;
    $fake_now[0] = shift @parts if @parts;

    $now = timelocal_posix(@fake_now);
}

# ScheduleReader gives us the events in chronological order 
my @events = ScheduleReader::from_file($filename);

print "Generating Now and Next details as of ", scalar localtime($now), ".\n";

my $updated = strftime("%a %H:%M", localtime($now));
my $logical_day = strftime("%a", localtime($now - $ScheduleReader::logical_midnight * 60 * 60));

my @all_venues = ScheduleReader::all_venues(@events);

my %venues = ();

for my $event (@events)
{
    next if ($event->{day} ne $logical_day);

	# Currently in between the start and end times? It's on now!
    if ($event->{stime} <= $now && $now <= $event->{etime})
    {
        $venues{$event->{venue}}{now} = $event;
    }

	# In the future and for a venue we don't already know the next event for?
	# It must be the next event for that venue.
    elsif ($event->{stime} > $now && ! exists $venues{$event->{venue}}{next})
    {
        $venues{$event->{venue}}{next} = $event;
    }
}

print "Now:\n";
for my $venue (sort keys %venues)
{
    next if ! exists $venues{$venue}{now};
    my $event = $venues{$venue}{now};
    printf "%4d  %s - %s %-20s %s\n", $event->{id}, $event->{"start"}, $event->{"end"}, $event->{venue}, $event->{title};
}

print "\nNext:\n";
for my $venue (sort keys %venues)
{
    next if ! exists $venues{$venue}{next};
    my $event = $venues{$venue}{next};
    printf "%4d  %s - %s %-20s %s\n", $event->{id}, $event->{"start"}, $event->{"end"}, $event->{venue}, $event->{title};
}

my %no_event_msgs = (
    now => "No event scheduled.",
    next => "No more events today.",
);

sub set_routes
{
    my $frame = shift;

    # Route 7-9 to Stages A-C
    $frame->set_route(7, 21);
    $frame->set_route(8, 22);
    $frame->set_route(9, 23);

    # Route 0 back to index frame
    $frame->set_route(0, 2);

    1;
}

sub generate_list
{
    my ($events_by_venue, $root, $event_root, @venues) = @_;

    my $first_frame = $root * 100;

	my $frame = new TelstarFrame($first_frame);
	my $paginator = new Paginator($frame, {
        header    => [],
        continues => "",
        continued => "",
        on_new_page => \&set_routes
    });
	my $wrapper = Text::Wrapper->new(columns => 38);

	$frame->{"pid"}{"sequential"} = 1;

    set_routes($frame);

	for my $venue (@venues)
	{
        my $key = 0;

        $paginator->add_text_block(
            "[R][n][D][Y]NOW AND NEXT:[W]$venue",
            "",
        );

        for my $which (qw(now next))
        {
            $key++;

            if (! exists $events_by_venue->{$venue}{$which})
            {
                $paginator->add_text_block(
                    "",
                    "[B][n][Y] ON \U$which\E:",
                    "",
                    "[C]" . $no_event_msgs{$which},
                );

                next;
            }

            my $event = $events_by_venue->{$venue}{$which};
            my $entry_frame = ($event_root * 1000) + $event->{id};

            $paginator->add_text_block(
                "",
                "[B][n][Y] ON \U$which\E: press[W]${key}[Y]for details",
            );

            # Build the index entry for this event
#           my $schedule_line = "[C]$event->{start} - $event->{end}   $event->{venue}";
            my $schedule_line = "[C]$event->{start} - $event->{end}";
            my @wrapped_title = split /\n/, $wrapper->wrap($event->{title});
            my @wrapped_by    = split /\n/, $wrapper->wrap("$event->{type} by " . $event->{by});

            my $wrapped_first = shift @wrapped_by;
            $wrapped_first =~ s/ by / by[C]/;
            
            my @entry = ();
            push @entry, "";
            push @entry, $schedule_line;
            push @entry, map "[Y]$_", @wrapped_title;
            push @entry, "[W]$wrapped_first";
            push @entry, map "[C]$_", @wrapped_by;

            $paginator->add_text_block(@entry);
            $paginator->frame->set_route($key, $entry_frame);
		}

        my $blanks = 20 - $paginator->frame->count_lines();
        $paginator->add_text_block(
            map("", 1..$blanks),
            sprintf("%40s", "[W]Updated " . $updated),
            "[R][n][W]7[Y]Stage A   [W]8[Y]Stage B   [W]9[Y]Stage C",
        );

        if ($venue eq $venues[-1])
        {
            # Route # on last page back to first page, for a continuous carousel.
            $paginator->frame->set_route(10, $first_frame);
            $paginator->finish();
        }
        else
        {
            # More pages to come; Paginator handles routing for sequential pages.
    		$paginator->new_page();
        }
    }
}

generate_list(\%venues, 21, 21, "Stage A");
generate_list(\%venues, 22, 22, "Stage B");
generate_list(\%venues, 23, 23, "Stage C");
generate_list(\%venues, 24, 24, grep /Workshop/, @all_venues);
generate_list(\%venues, 25, 25, grep /Sector/, @all_venues);
generate_list(\%venues, 26, 26, grep !/Stage|Workshop|Sector/, @all_venues);
generate_list(\%venues, 27, 27, grep /Stage/, @all_venues);
generate_list(\%venues, 29, 29, @all_venues);